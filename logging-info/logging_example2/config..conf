# Configuration methods
# We have seen how to configure logging creating loggers, handlers, and formatters explicitely in code. There are two other configration methods:

#Creating a logging config file and reading it using the fileConfig() function. See example below.
#Creating a dictionary of configuration information and passing it to the dictConfig() function. 
# https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig 
#.conf file
#Create a .conf (or sometimes stored as .ini) file, define the loggers, handlers, and formatters and provide the names as keys. 
# After their names are defined, they are configured by adding the words logger, handler, and formatter before their names separated by an underscore. 
# Then we can set the properties for each logger, handler, and formatter. 
# In the example below, the root logger and a logger named simpleExample will be configured with a StreamHandler.


# logging.conf
[loggers]
keys=root,simpleExample

[handlers]
keys=consoleHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_simpleExample]
level=DEBUG
handlers=consoleHandler
qualname=simpleExample
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
